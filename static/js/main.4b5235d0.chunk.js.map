{"version":3,"sources":["components/accountsSelect/AccountsSelect.tsx","api/index.ts","actions/types.ts","actions/index.ts","components/customInput/CustomInput.tsx","components/transactionDescription/TransactionDescription.tsx","components/transactionCost/TransactionCost.tsx","components/targetAccounts/TargetAccounts.tsx","components/sumTransaction/SumTransaction.tsx","components/successAlert/SuccessAlert.tsx","components/CustomLoading.tsx","components/addTransaction/AddTransaction.tsx","components/transactionsList/TransactionsList.tsx","components/ConfirmEvenAccounts.tsx","components/accountInfo/AccountInfo.tsx","components/accountDetail/AccountDetail.tsx","history.ts","components/header/Header.tsx","components/Home.tsx","components/HlacikJeRetard.tsx","components/App/App.tsx","reducers/dbReducer.tsx","reducers/memeReducer.ts","reducers/index.ts","index.tsx"],"names":["connect","state","accounts","db","name","field","meta","FormControl","error","touched","length","fullWidth","InputLabel","id","Select","label","labelId","value","map","MenuItem","FormHelperText","axios","create","baseURL","headers","memeapi","FETCH_ACCOUNTS","FETCHING_ACCOUNTS","FETCH_TRANSACTIONS","FETCHING_TRANSACTIONS","FETCH_MEME","FETCHING_MEME","fetchAccounts","dispatch","a","type","payload","get","res","accounts_aux","data","owesTo","forEach","row","rootacc","find","rootaccount","targetaccount","ammount","account","filetredOwesTo","filter","toString","push","_","mapValues","keyBy","alert","CustomInput","fieldName","custom","isError","TextField","TransactionDescription","TransactionCost","InputProps","endAdornment","InputAdornment","position","values","sx","width","padding","FormLabel","component","FormGroup","display","flexDirection","justifyContent","gap","FormControlLabel","control","Checkbox","color","checked","includes","undefined","formValues","selectedAccounts","useMemo","targetAccounts","join","senderAccount","className","cost","description","SuccessAlert","handleNextTransaction","success","Box","alignItems","Alert","severity","Button","onClick","CustomLoading","CircularProgress","fetchingAccounts","useState","isSubmitting","setIsSubmitting","submittedSuccessfully","setSubmittedSuccesfully","submittedWithError","setSubmittedwithError","formVals","setFormVals","useEffect","handleFormSubmit","vals","getNewAccounts","targetAcc","created","itemCost","Math","floor","filtered","result","acc","recipient","submitFormValues","parseInt","desc","date","Date","post","status","transactionId","t","transactionid","accountid","newAccounts","res_","owesToArr","val","key","_id","put","isFilled","Object","keys","initialValues","maxWidth","margin","enableReinitialize","onSubmit","validate","errors","trim","test","transactions","fetchingTransactions","accountNames","fetchTransactions","orderBy","offset","setOffset","TableContainer","Paper","overflow","Table","minWidth","TableHead","TableRow","TableCell","TableBody","slice","item","format","locale","cs","marginBlock","max","disabled","min","open","acc1Name","acc1Id","acc2Name","acc2Id","handleClose","useDispatch","evenAccounts","ids","aux","Dialog","DialogContent","DialogActions","accountId","visibleDialog","setVisibleDialog","getAccountName","accId","Typography","textAlign","variant","owes","countOwes","paddingTop","selectedAcccount","setSelectedAccount","onChange","e","target","createBrowserHistory","basename","navbarItems","path","Header","collapsed","setCollapsed","linkStyle","marginLeft","renderedItems","to","ClickAwayListener","onClickAway","Icon","alignSelf","cursor","marginRight","fill","Menu","fontSize","fontWeight","marginBottom","marginTop","url","meme","title","postLink","fetching","fetchMeme","style","Link","href","rel","src","alt","HlacikJeRetard","App","prefersDarkMode","useMediaQuery","theme","createTheme","palette","mode","ThemeProvider","history","exact","Home","AddTransaction","TransactionsList","AccountDetail","INITIAL_STATE","dbReducer","action","memeReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.4b5235d0.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { AccountsType } from '../../types'\nimport { Select, MenuItem, InputLabel, FormControl, FormHelperText } from '@mui/material'\nimport { Field } from 'formik'\n\ntype Props = {\n    accounts: AccountsType\n}\n\nconst AccountsSelect: React.FC<Props> = ({ accounts }) => {\n    const renderAccounts = () => {\n        return (\n            <Field name=\"account\">\n                {({ field, meta }: any) => (\n                    <FormControl error={meta.touched && meta.error?.length > 0} fullWidth>\n                        <InputLabel id=\"account\">Účet</InputLabel>\n                        <Select\n                            {...field}\n                            label=\"account\"\n                            labelId=\"account\"\n                            value={field.value}\n                        >\n                            {accounts.map(({ name, id }) => (\n                                <MenuItem\n                                    key={id}\n                                    value={id}\n                                >{name}</MenuItem>\n                            ))}\n                        </Select>\n                        {meta.error && meta.touched && <FormHelperText>{meta.error}</FormHelperText>}\n                    </FormControl>\n                )}\n\n            </Field>\n        )\n    }\n\n    return (\n        renderAccounts()\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps)(AccountsSelect)\n","import axios from 'axios'\nexport const API_KEY = '6179190f8597142da1745b0f'\nexport default axios.create({\n    baseURL: 'https://mancavecashflow-93a1.restdb.io/rest/',\n    headers: {\n        'cache-control': 'no-cache',\n        'x-apikey': API_KEY\n    }\n})\n\nexport const memeapi = axios.create({\n    baseURL: 'https://meme-api.herokuapp.com/'\n})","export const FETCH_ACCOUNTS = 'fetchAccounts'\nexport const FETCHING_ACCOUNTS = 'fetchingAccounts'\nexport const FETCH_TRANSACTIONS = 'fetchTransactions'\nexport const FETCHING_TRANSACTIONS = 'fetchingTransactions'\nexport const FETCH_MEME = 'fetchMeme'\nexport const FETCHING_MEME = 'fetchingMeme'","import { Dispatch } from 'react';\nimport db, { memeapi } from '../api'\nimport { AccountsType } from '../types';\nimport {\n    FETCH_ACCOUNTS,\n    FETCHING_ACCOUNTS,\n    FETCH_TRANSACTIONS,\n    FETCHING_TRANSACTIONS,\n    FETCH_MEME,\n    FETCHING_MEME\n} from \"./types\"\nimport _ from 'lodash'\n\nexport const fetchAccounts = () => async (dispatch: Dispatch<any>) => {\n    dispatch({\n        type: FETCHING_ACCOUNTS,\n        payload: true\n    })\n\n    try {\n        const res = await db.get('/accounts')\n        const accounts_aux = res.data as [{ id: string, _id: string, name: string, owesTo: { [key: string]: number } }]\n\n        const owesTo = await db.get('/owesto') as { data: [{ rootaccount: string, targetaccount: string, ammount: number }] }\n\n\n        owesTo.data.forEach(row => {\n            const rootacc = accounts_aux.find(({ id }) => id === row.rootaccount)\n            if (rootacc) {\n                rootacc.owesTo[row.targetaccount] = row.ammount\n            }\n        })\n\n        let accounts: AccountsType = []\n        accounts_aux.forEach(account => {\n            const filetredOwesTo = owesTo.data.filter(({ rootaccount }) => rootaccount === account.id.toString())\n            accounts.push({\n                id: account.id,\n                name: account.name,\n                owesTo: _.mapValues(_.keyBy(filetredOwesTo, 'targetaccount'), 'ammount')\n            })\n        })\n\n        dispatch({\n            type: FETCH_ACCOUNTS,\n            payload: accounts\n        })\n\n        dispatch({\n            type: FETCHING_ACCOUNTS,\n            payload: false\n        })\n    } catch (e) {\n        alert('Vyskytla se chyba :(')\n    }\n}\n\nexport const fetchTransactions = () => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch({\n            type: FETCHING_TRANSACTIONS,\n            payload: true\n        })\n        const res = await db.get('/transactionhistory')\n        dispatch({\n            type: FETCH_TRANSACTIONS,\n            payload: _.orderBy(res.data as [{}], ['id'], ['desc'])\n        })\n        dispatch({\n            type: FETCHING_TRANSACTIONS,\n            payload: false\n        })\n    } catch (e) {\n        alert('Vyskytla se chyba :(')\n    }\n}\n\nexport const fetchMeme = () => async (dispatch: Dispatch<any>) => {\n    dispatch({\n        type: FETCHING_MEME,\n        payload: true\n    })\n    const res = await memeapi.get('/gimme') as {\n        data: {\n            url: string, title: string, postLink: string\n        }\n    }\n\n    dispatch({\n        type: FETCH_MEME,\n        payload: {\n            url: res.data.url,\n            title: res.data.title,\n            postLink: res.data.postLink\n        }\n    })\n\n    dispatch({\n        type: FETCHING_MEME,\n        payload: false\n    })\n}","import React from 'react'\nimport { Field } from 'formik'\nimport { FormControl, FormHelperText, TextField } from '@mui/material'\n\ntype Props = {\n    fieldName: string,\n    label: string,\n    custom?: any\n}\n\nconst CustomInput: React.FC<Props> = ({ fieldName, label, custom }: Props) => {\n    return (\n        <Field name={fieldName}>\n            {({ field, meta }: any) => {\n                const isError = meta.touched && meta.error?.length > 0\n                return (\n                    <FormControl error={isError} fullWidth>\n                        <TextField\n                            {...field}\n                            {...custom}\n                            label={label}\n                            id={fieldName}\n                            error={isError}\n                        />\n                        {isError && <FormHelperText>{meta.error}</FormHelperText>}\n                    </FormControl>\n                )\n            }}\n        </Field>\n    )\n}\n\nexport default CustomInput\n","import React from 'react'\nimport CustomInput from '../customInput/CustomInput'\n\nconst TransactionDescription = () => {\n    return (\n        <CustomInput fieldName=\"description\" label=\"Popis\" />\n    )\n}\n\nexport default TransactionDescription\n","import React from 'react'\nimport CustomInput from '../customInput/CustomInput'\nimport { InputAdornment } from '@mui/material'\n\nconst TransactionCost = () => {\n    return (\n        <CustomInput fieldName=\"cost\" label=\"Cena položky\" custom={{\n            InputProps: { endAdornment: <InputAdornment position=\"end\">Kč</InputAdornment> }\n        }} />\n    )\n}\n\nexport default TransactionCost\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { fetchAccounts } from '../../actions'\nimport { Field } from 'formik'\nimport { AccountsType } from '../../types'\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, FormLabel } from '@mui/material'\nimport { Box } from '@mui/system'\n\ntype Props = {\n    values: any,\n    error: string\n    fetchAccounts: any,\n    accounts: AccountsType\n}\n\nconst TargetAccounts: React.FC<Props> = ({ values, error, accounts }: Props) => {\n    return (\n        <Box sx={{ width: '100%', padding: '0 1rem' }}>\n            <FormControl error={error ? true : false}>\n                <FormLabel component=\"legend\">Rozdělit mezi účty:</FormLabel>\n                <FormGroup sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-between',\n                    gap: [0, '3rem']\n                }}>\n                    {accounts.map(({ name, id }) => (\n                        <Field\n                            key={id}\n                            name='targetAccounts'\n                            value={id}\n                            type=\"checkbox\"\n                            component={({ field }: any) => {\n                                return (\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox {...field} color='primary' checked={values.includes(id.toString())} />\n                                        }\n                                        label={name}\n                                    />\n                                )\n                            }}\n                        />\n                    ))}\n                </FormGroup>\n                {error !== undefined && <FormHelperText>{error}</FormHelperText>}\n            </FormControl>\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps, { fetchAccounts })(TargetAccounts)\n","import React, { useMemo } from 'react'\nimport { connect } from 'react-redux'\nimport { AccountsType, FormikVals } from '../../types'\nimport './sumTransaction.scss'\n\ntype Props = {\n    accounts: AccountsType,\n    formValues: FormikVals\n}\n\nconst SumTransaction: React.FC<Props> = ({ accounts, formValues }: Props) => {\n    const selectedAccounts = useMemo((): string => {\n        return (\n            formValues.targetAccounts.length === accounts.length\n                ? \"všechny účty\"\n                : `účty ${accounts.filter(({ id }) => formValues.targetAccounts.includes(id.toString())).map(({ name }) => name).join(', ')}`\n        )\n    }, [accounts, formValues.targetAccounts])\n\n    const senderAccount = useMemo((): string => {\n        if (accounts === undefined) {\n            return ''\n        }\n        return accounts.filter(({ id }) => formValues.account.toString() === id.toString())[0].name\n    }, [accounts, formValues.account])\n\n    return (\n        <div className=\"sumRoot\">\n            Částka <span className=\"highlight\">{formValues.cost} Kč</span>&nbsp;za položku <span className=\"highlight\">{formValues.description}</span>&nbsp;bude z účtu <span className=\"highlight\">{senderAccount}</span>&nbsp;rozdělena mezi <span className=\"highlight\">{selectedAccounts}</span>.\n        </div>\n    )\n}\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps)(SumTransaction)\n","import React from 'react'\nimport { Alert, Box, Button } from '@mui/material'\n\ntype Props = {\n    handleNextTransaction: () => void,\n    success?: boolean\n}\n\nconst SuccessAlert: React.FC<Props> = ({ handleNextTransaction, success }: Props) => {\n    return (\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: '.5rem', justifyContent: 'center', alignItems: 'center' }}>\n            {success\n                ? <Alert severity=\"success\" >Přidání proběhlo úspěšně!</Alert>\n                : <Alert severity=\"error\">Něco se pokazilo, zkus to prosím znovu</Alert>}\n            <Button onClick={handleNextTransaction}>Další transakce</Button>\n        </Box>\n    )\n}\n\nexport default SuccessAlert","import React from 'react'\nimport { Box, CircularProgress } from '@mui/material'\n\nconst CustomLoading = () => {\n    return (\n        <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            <CircularProgress />\n        </Box>\n    )\n}\n\nexport default CustomLoading\n","import React, { useEffect, useMemo, useState } from 'react'\nimport AccountsSelect from '../accountsSelect/AccountsSelect'\nimport { Formik, Form } from 'formik'\nimport { Button, Box } from '@mui/material'\nimport { AccountsType, FormikVals, ItemType } from '../../types'\nimport { fetchAccounts } from '../../actions'\nimport { connect } from 'react-redux'\nimport './AddTransaction.scss'\nimport TransactionDescription from '../transactionDescription/TransactionDescription'\nimport TransactionCost from '../transactionCost/TransactionCost'\nimport TargetAccounts from '../targetAccounts/TargetAccounts'\nimport SumTransaction from '../sumTransaction/SumTransaction'\nimport db from '../../api'\nimport _ from 'lodash'\nimport SuccessAlert from '../successAlert/SuccessAlert'\nimport { AxiosResponse } from 'axios'\nimport CustomLoading from '../CustomLoading'\n\ntype Props = {\n    fetchAccounts: () => any,\n    accounts: AccountsType,\n    fetchingAccounts: boolean\n}\n\nconst AddTransaction: React.FC<Props> = ({ fetchAccounts, accounts, fetchingAccounts }: Props) => {\n    const [isSubmitting, setIsSubmitting] = useState(false)\n    const [submittedSuccessfully,\n        setSubmittedSuccesfully] = useState(false)\n    const [submittedWithError, setSubmittedwithError] = useState(false)\n    const [formVals, setFormVals] = useState<FormikVals>({})\n\n    useEffect(() => {\n        fetchAccounts()\n    }, [fetchAccounts])\n\n    const handleNextTransaction = () => {\n        setIsSubmitting(false)\n        setSubmittedSuccesfully(false)\n        setSubmittedwithError(false)\n    }\n\n    const handleFormSubmit = async (vals: FormikVals) => {\n        setFormVals(vals)\n        setIsSubmitting(true)\n        fetchAccounts()\n    }\n\n    useEffect(() => {\n        const getNewAccounts = ({ targetAcc, cost, created }: ItemType): AccountsType => {\n            const itemCost = Math.floor(cost / targetAcc.length)\n            const filtered = accounts.filter(({ id }) => {\n                return id.toString() !== created.toString()\n            })\n            let result: AccountsType = []\n            targetAcc.forEach(acc => {\n                const recipient = filtered.find(({ id }) => {\n                    return id.toString() === acc.toString()\n                })\n                if (recipient) {\n                    recipient.owesTo[created] = (recipient.owesTo[created] ?? 0) + itemCost\n                    result = [...result, recipient]\n                }\n            })\n            return result\n        }\n\n        const submitFormValues = async () => {\n            const data: ItemType = {\n                created: (formVals.account as string),\n                cost: parseInt(formVals.cost as string),\n                targetAcc: (formVals.targetAccounts as string[]),\n                desc: formVals.description as string,\n                date: new Date().toString()\n            }\n\n            const res: AxiosResponse<ItemType> = await db.post('/transactionhistory', data)\n            if (res.status !== 201) {\n                return\n            }\n            const transactionId = res.data.id\n            for (let t of data.targetAcc) {\n                db.post('/itemaccounts', {\n                    transactionid: transactionId,\n                    accountid: t\n                })\n            }\n\n            const newAccounts = getNewAccounts(data)\n\n            const res_ = await db.get('/owesto')\n            const owesToArr = res_.data as [{\n                _id: string,\n                rootaccount: string,\n                targetaccount: string,\n                ammount: number\n            }]\n\n            for (let acc of newAccounts) {\n                _.map(acc.owesTo, (val, key) => {\n                    const id = owesToArr.find(({ rootaccount, targetaccount }) => {\n                        return rootaccount === acc.id.toString() && targetaccount === key\n                    })?._id\n\n                    if (id) {\n                        db.put(`/owesto/${id}`, { ammount: val })\n                    }\n                })\n            }\n\n            setIsSubmitting(false)\n            setSubmittedSuccesfully(true)\n        }\n\n        if (!fetchingAccounts && isSubmitting) {\n            submitFormValues()\n        }\n        // eslint-disable-next-line\n    }, [fetchingAccounts])\n\n    const isFilled = (values: FormikVals) => {\n        for (let key of Object.keys(values)) {\n            if (values[key].length === 0) {\n                return false\n            }\n        }\n        return true\n    }\n\n    const initialValues = useMemo(() => {\n        return {\n            account: '',\n            description: '',\n            cost: '',\n            targetAccounts: accounts.map(({ id }) => id.toString())\n        }\n    }, [accounts])\n\n    const validate = (vals: any) => {\n        let errors = {}\n\n        if (!vals.account) {\n            errors = { ...errors, account: \"Vyber účet\" }\n        }\n\n        if (!vals.description) {\n            errors = { ...errors, description: \"Popis je nutný\" }\n        }\n\n        if (vals.description?.trim().length < 2 || vals.description?.trim().length > 100) {\n            errors = { ...errors, description: \"Chybná délka popisu\" }\n        }\n\n        if (!(/^-?\\d+$/.test(vals.cost))) {\n            errors = { ...errors, cost: \"Cena musí být číslo\" }\n        }\n\n        if (!vals.targetAccounts.length) {\n            errors = { ...errors, targetAccounts: \"Je potřeba zvolit alespoň jeden účet.\" }\n        }\n        return errors\n    }\n\n    return (\n        <Box sx={{ maxWidth: 400, margin: 'auto' }}>\n            {submittedSuccessfully && <SuccessAlert\n                success\n                handleNextTransaction={handleNextTransaction}\n            />}\n\n            {submittedWithError && <SuccessAlert\n                handleNextTransaction={handleNextTransaction}\n            />}\n\n            {!submittedSuccessfully && !submittedWithError && (\n                <Formik enableReinitialize initialValues={initialValues} onSubmit={handleFormSubmit} validate={validate}>\n                    {({ values, errors }: any) => {\n                        return (\n                            <Form>\n                                <Box className=\"root\" sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem' }}>\n                                    <AccountsSelect />\n                                    <TransactionDescription />\n                                    <TransactionCost />\n                                    <TargetAccounts values={values.targetAccounts} error={errors.targetAccounts} />\n                                    {isFilled(values) && !Object.keys(errors).length && <SumTransaction formValues={values} />}\n                                    {isSubmitting\n                                        ? <CustomLoading />\n                                        : <Button type=\"submit\">\n                                            Potvrdit\n                                        </Button>}\n                                </Box>\n                            </Form>\n                        )\n                    }}\n                </Formik>\n            )}\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts, fetchingAccounts: state.db.fetchingAccounts }\n}\n\nexport default connect(mapStateToProps, { fetchAccounts })(AddTransaction)\n","import {\n    Box,\n    Button,\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableBody,\n    TableCell\n} from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchTransactions, fetchAccounts } from '../../actions'\nimport { TransactionHistory } from '../../types'\nimport _ from 'lodash'\nimport { format } from 'date-fns'\nimport { cs } from 'date-fns/locale'\nimport CustomLoading from '../CustomLoading'\n\ntype Props = {\n    fetchTransactions: () => any,\n    fetchAccounts: () => any,\n    transactions: TransactionHistory,\n    accountNames: { [key: string]: string },\n    fetchingTransactions: boolean,\n    fetchingAccounts: boolean\n}\n\nconst TransactionsList: React.FC<Props> = ({\n    fetchTransactions,\n    fetchAccounts,\n    transactions,\n    accountNames,\n    fetchingTransactions,\n    fetchingAccounts\n}: Props) => {\n    const [offset, setOffset] = useState<number>(0)\n    const limit = 10\n\n    useEffect(() => {\n        fetchTransactions()\n    }, [fetchTransactions])\n\n    useEffect(() => {\n        fetchAccounts()\n    }, [fetchAccounts])\n\n    return (\n        transactions && !fetchingAccounts && !fetchingTransactions\n            ? (<Box sx={{ maxWidth: 700, margin: 'auto' }}>\n                <TableContainer component={Paper} sx={{ overflow: 'auto' }}>\n                    <Table sx={{ minWidth: '600px' }}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Z účtu</TableCell>\n                                <TableCell>Na účty</TableCell>\n                                <TableCell>Částka</TableCell>\n                                <TableCell>Popis</TableCell>\n                                <TableCell>Datum</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {transactions.slice(offset, limit + offset).map(item => (\n                                <TableRow key={item.id}>\n                                    <TableCell>{accountNames[item.created]}</TableCell>\n                                    <TableCell>{item.targetAcc.map(id => accountNames[id]).join(', ')}</TableCell>\n                                    <TableCell>{item.cost} Kč</TableCell>\n                                    <TableCell>{item.desc}</TableCell>\n                                    <TableCell>{format(new Date(item.date), 'do LLLL yyyy', { locale: cs })}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    marginBlock: '1rem'\n                }}>\n                    <Button\n                        onClick={() => setOffset(Math.max(0, offset - limit))}\n                        disabled={offset === 0}\n                    >Předchozí</Button>\n                    <Button\n                        disabled={offset + limit > transactions.length - 1}\n                        onClick={() => setOffset(Math.min(transactions.length - 1, offset + limit))}\n                    >Další</Button>\n                </Box>\n            </Box>)\n            : <CustomLoading />\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        transactions: state.db.transactions,\n        fetchingTransactions: state.db.fetchingTransactions,\n        fetchingAccounts: state.db.fetchingAccounts,\n        accountNames: _.mapValues(_.keyBy(state.db.accounts, 'id'), 'name')\n    }\n}\nexport default connect(mapStateToProps, { fetchTransactions, fetchAccounts })(TransactionsList)\n","import React from 'react'\nimport { Button, Dialog, DialogActions, DialogContent } from '@mui/material'\nimport db from '../api'\nimport { connect, useDispatch } from 'react-redux'\nimport { fetchAccounts } from '../actions'\nimport { FETCHING_ACCOUNTS } from '../actions/types'\n\ntype Props = {\n    open: boolean,\n    acc1Name: string,\n    acc1Id: string,\n    acc2Name: string,\n    acc2Id: string,\n    handleClose: () => any,\n    fetchAccounts: () => any\n}\n\nconst ConfirmEvenAccounts: React.FC<Props> = ({\n    open,\n    acc1Name,\n    acc1Id,\n    acc2Name,\n    acc2Id,\n    handleClose,\n    fetchAccounts\n}: Props) => {\n    const dispatch = useDispatch()\n\n    const evenAccounts = async () => {\n        dispatch({ type: FETCHING_ACCOUNTS, payload: true })\n        handleClose()\n        const res_ = await db.get('/owesto')\n        const owesToArr = res_.data as [{\n            _id: string,\n            rootaccount: string,\n            targetaccount: string,\n            ammount: number\n        }]\n\n        const ids = owesToArr.filter(({ rootaccount, targetaccount }) => {\n            return (\n                rootaccount === acc1Id.toString() && targetaccount === acc2Id.toString()\n            ) || (rootaccount === acc2Id.toString() && targetaccount === acc1Id.toString())\n        })\n\n        for (let aux of ids) {\n            await db.put(`/owesto/${aux._id}`, { ammount: 0 })\n        }\n\n        fetchAccounts()\n    }\n\n\n    return (\n        <Dialog\n            open={open}\n        >\n            <DialogContent>\n                Tímto se vyrovná rozdíl mezi účty {acc1Name} a {acc2Name}. Pokračovat?\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>NE</Button>\n                <Button onClick={evenAccounts}>ANO</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default connect(null, { fetchAccounts })(ConfirmEvenAccounts)","import React, { useMemo, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Box, Button, Typography } from '@mui/material'\nimport { AccountsType } from '../../types'\nimport ConfirmEvenAccounts from '../ConfirmEvenAccounts'\nimport CustomLoading from '../CustomLoading'\nimport _ from 'lodash'\nimport './accountInfo.scss'\n\n\ntype Props = {\n    accountId: string,\n    accounts: AccountsType,\n    fetchingAccounts: boolean\n}\n\nconst AccountInfo: React.FC<Props> = ({\n    accountId, accounts, fetchingAccounts\n}: Props) => {\n    const [visibleDialog, setVisibleDialog] = useState('')\n\n    const account = useMemo(() => {\n        return accounts.find(({ id }) => accountId.toString() === id.toString())\n    }, [accounts, accountId])\n\n    const countOwes = (accId: string, val: number) => {\n        if (!account) return\n\n        const res = accounts.find(({ id }) => accId.toString() === id.toString())?.owesTo[account.id]\n        if (res === undefined) return\n        return val - res\n    }\n\n    const getAccountName = (accId: string) => {\n        return accounts.find(({ id }) => accId.toString() === id.toString())?.name\n    }\n\n    return (\n        account !== undefined && !fetchingAccounts\n            ? <Box>\n                <Typography\n                    sx={{ textAlign: 'center' }}\n                    component='h3'\n                    variant='h4'\n                    className=\"account-title\"\n                >{account.name}</Typography>\n                <Box className=\"accounts-box\">\n                    {_.map(account.owesTo, (val, key) => {\n                        const owes = countOwes(key, val)\n                        return (\n                            <Box key={key} className=\"account-row\" sx={{\n                                flexDirection: ['column', 'row']\n                            }}>\n                                <Box>Účtu <span className=\"highlight\">{getAccountName(key)}</span> dluží <span className={'highlight ' + (owes && owes > 0 ? 'owes-more' : 'owes-less')}>{owes} Kč</span>.</Box>\n                                <Button\n                                    sx={{ paddingTop: ['.5rem'] }}\n                                    onClick={() => setVisibleDialog(key)}\n                                    disabled={owes === 0}\n                                >Vyrovnat účty</Button>\n                                <ConfirmEvenAccounts\n                                    open={visibleDialog === key}\n                                    acc1Id={account.id}\n                                    acc1Name={account.name}\n                                    acc2Id={key}\n                                    acc2Name={getAccountName(key) || ''}\n                                    handleClose={() => setVisibleDialog('')}\n                                />\n                            </Box>\n                        )\n                    })}\n                </Box>\n            </Box>\n            : <CustomLoading />\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts, fetchingAccounts: state.db.fetchingAccounts }\n}\n\nexport default connect(mapStateToProps)(AccountInfo)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchAccounts } from '../../actions'\nimport { AccountsType } from '../../types'\nimport AccountInfo from '../accountInfo/AccountInfo'\nimport {\n    Box,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    FormHelperText\n} from '@mui/material'\n\ntype Props = {\n    fetchAccounts: () => any,\n    accounts: AccountsType\n}\n\nconst AccountDetail: React.FC<Props> = ({ fetchAccounts, accounts }: Props) => {\n    const [selectedAcccount, setSelectedAccount] = useState<string>('69')\n\n    useEffect(() => {\n        fetchAccounts()\n    }, [fetchAccounts])\n\n    return (\n        <Box sx={{ maxWidth: 400, margin: 'auto' }}>\n            <FormControl fullWidth>\n                <InputLabel id=\"account\">Účet</InputLabel>\n                <Select\n                    label=\"account\"\n                    labelId=\"account\"\n                    value={selectedAcccount}\n                    onChange={e => setSelectedAccount(e.target.value)}\n                >\n                    {accounts.map(({ name, id }) => (\n                        <MenuItem\n                            key={id}\n                            value={id}\n                        >{name}</MenuItem>\n                    ))}\n                </Select>\n                <FormHelperText>Zvolte účet, jehož detail chcete zobrazit.</FormHelperText>\n                {selectedAcccount !== undefined && <AccountInfo accountId={selectedAcccount} />}\n            </FormControl>\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps, { fetchAccounts })(AccountDetail)","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory({\n    basename: '/brno-byt-cash'\n});","import React, { useState, useMemo } from 'react'\nimport { Box } from '@mui/system'\nimport { ClickAwayListener, Icon, Typography } from '@mui/material'\nimport { Menu } from '@mui/icons-material'\nimport { Link } from 'react-router-dom'\nimport './header.scss'\nimport { NavbarItemType } from '../../types'\n\n\n\nconst navbarItems: NavbarItemType[] = [\n    { name: 'Domů', path: '/' },\n    { name: 'Přidat položku', path: '/add' },\n    { name: 'Historie transakcí', path: '/list' },\n    { name: 'Výpis účtu', path: '/account' },\n]\n\nconst Header = () => {\n    const [collapsed, setCollapsed] = useState(true)\n\n    const linkStyle = {\n        display: [collapsed ? 'none' : 'inline', 'flex-item'],\n        marginLeft: ['1rem'],\n    }\n\n    const renderedItems = useMemo(() => navbarItems.map(({ name, path }) => (\n        <Link\n            key={path}\n            onClick={() => setCollapsed(true)}\n            to={path}>{name}</Link>\n    )), [])\n\n    return (\n        <ClickAwayListener onClickAway={() => setCollapsed(true)}>\n            <Box>\n                <Box className=\"navbar\" sx={{\n                    flexDirection: ['column', 'row'],\n                    '& a': { ...linkStyle }\n                }}>\n                    <Icon sx={{\n                        display: ['inline', 'none'],\n                        alignSelf: 'flex-end',\n                        cursor: 'hover',\n                        marginRight: '1rem',\n                        fill: '#000'\n                    }} component={Menu} onClick={() => setCollapsed(!collapsed)} />\n                    {renderedItems}\n                </Box>\n                <Typography component='h1' sx={{\n                    textAlign: 'center',\n                    fontSize: ['1.5rem', '2.5rem'],\n                    fontWeight: 'bold',\n                    marginBottom: '2rem',\n                    marginTop: '5rem'\n                }}>Where's my money?</Typography>\n            </Box>\n        </ClickAwayListener>\n    )\n}\n\nexport default Header\n","import React, { useEffect } from 'react'\nimport { Box, Link, Button } from '@mui/material'\nimport { fetchMeme } from '../actions'\nimport { connect } from 'react-redux'\nimport CustomLoading from './CustomLoading'\n\ntype Props = {\n    fetchMeme: () => any,\n    url: string,\n    title: string,\n    postLink: string,\n    fetching: boolean\n}\n\nconst Home: React.FC<Props> = ({\n    fetchMeme, url, title, postLink, fetching\n}: Props) => {\n    useEffect(() => {\n        fetchMeme()\n    }, [fetchMeme])\n\n    return (\n        <Box sx={{\n            width: 'min(90vw, 400px)',\n            display: 'flex',\n            flexDirection: 'column',\n            margin: 'auto',\n            alignItems: 'center',\n\n        }}>\n            <p style={{ margin: 0, padding: 0, textAlign: 'center' }}>Náhodný meme zde:</p>\n            {fetching\n                ? <CustomLoading />\n                : (<>\n                    <Link\n                        sx={{ fontSize: '1.5rem' }}\n                        href={postLink}\n                        target=\"_blank\"\n                        rel=\"noreferrer\">{title}</Link>\n                    <img src={url} alt={title} style={{ maxWidth: '100%' }} title={title} />\n                    <Button\n                        sx={{ marginTop: '1rem' }}\n                        onClick={() => fetchMeme()}>\n                        Další prosím\n                    </Button>\n                </>)}\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        url: state.meme.url,\n        title: state.meme.title,\n        postLink: state.meme.postLink,\n        fetching: state.meme.fetching\n    }\n}\nexport default connect(mapStateToProps, { fetchMeme })(Home)\n","import React from 'react'\n\nconst HlacikJeRetard = () => {\n    return (\n        <>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n        </>\n    )\n}\n\nexport default HlacikJeRetard\n","import React, { useMemo } from 'react';\nimport { Paper, Box, useMediaQuery, createTheme } from '@mui/material'\nimport AddTransaction from '../addTransaction/AddTransaction';\nimport TransactionsList from '../transactionsList/TransactionsList';\nimport AccountDetail from '../accountDetail/AccountDetail';\nimport { Route, Router } from 'react-router'\nimport history from '../../history'\nimport './App.scss'\nimport Header from '../header/Header';\nimport { ThemeProvider } from '@mui/system';\nimport Home from '../Home';\nimport HlacikJeRetard from '../HlacikJeRetard';\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = useMemo(\n    () => createTheme({\n      palette: {\n        mode: prefersDarkMode ? 'dark' : 'light',\n      },\n    }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Router history={history}>\n        <Paper className=\"paper\">\n          <Box className=\"root\">\n            <Header />\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/add\" exact component={AddTransaction} />\n            <Route path=\"/list\" exact component={TransactionsList} />\n            <Route path=\"/account\" exact component={AccountDetail} />\n            <Route path=\"/hlacikjeretard\" exact component={HlacikJeRetard} />\n          </Box>\n        </Paper>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","import { ActionType } from \"../types\"\nimport { FETCHING_ACCOUNTS, FETCHING_TRANSACTIONS, FETCH_ACCOUNTS, FETCH_TRANSACTIONS } from \"../actions/types\"\n\nconst INITIAL_STATE = {\n    accounts: []\n}\n\nconst dbReducer = (state = INITIAL_STATE, action: ActionType) => {\n    switch (action.type) {\n        case FETCH_ACCOUNTS:\n            return { ...state, accounts: action.payload }\n        case FETCHING_ACCOUNTS:\n            return { ...state, fetchingAccounts: action.payload }\n        case FETCH_TRANSACTIONS:\n            return { ...state, transactions: action.payload }\n        case FETCHING_TRANSACTIONS:\n            return { ...state, fetchingTransactions: action.payload }\n        default:\n            return state\n    }\n}\n\nexport default dbReducer","import { ActionType } from \"../types\"\nimport { FETCHING_MEME, FETCH_MEME } from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    url: '',\n    title: '',\n    postLink: '',\n    fetching: true\n}\n\nconst memeReducer = (state = INITIAL_STATE, action: ActionType) => {\n    switch (action.type) {\n        case FETCH_MEME:\n            return {\n                ...state,\n                ...action.payload\n            }\n        case FETCHING_MEME: {\n            return {\n                ...state,\n                fetching: action.payload\n            }\n        }\n\n        default:\n            return state\n    }\n}\nexport default memeReducer","import { combineReducers } from 'redux'\nimport dbReducer from './dbReducer'\nimport memeReducer from './memeReducer'\n\nexport default combineReducers({\n    db: dbReducer,\n    meme: memeReducer,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk'\nimport { CssBaseline } from '@mui/material'\n\nimport reducers from './reducers'\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}