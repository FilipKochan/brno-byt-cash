{"version":3,"sources":["components/accountsSelect/AccountsSelect.tsx","api/index.ts","actions/types.ts","actions/index.ts","components/customInput/CustomInput.tsx","components/transactionDescription/TransactionDescription.tsx","components/transactionCost/TransactionCost.tsx","components/targetAccounts/TargetAccounts.tsx","components/sumTransaction/SumTransaction.tsx","components/successAlert/SuccessAlert.tsx","components/CustomLoading.tsx","components/addTransaction/AddTransaction.tsx","components/transactionsList/TransactionsList.tsx","components/ConfirmEvenAccounts.tsx","components/accountInfo/AccountInfo.tsx","components/accountDetail/AccountDetail.tsx","history.ts","components/header/Header.tsx","components/Home.tsx","components/HlacikJeRetard.tsx","components/App/App.tsx","reducers/dbReducer.tsx","reducers/memeReducer.ts","reducers/index.ts","index.tsx"],"names":["connect","state","accounts","db","name","field","meta","FormControl","error","touched","length","fullWidth","InputLabel","id","Select","label","labelId","value","map","MenuItem","FormHelperText","axios","create","baseURL","headers","memeapi","FETCH_ACCOUNTS","FETCHING_ACCOUNTS","FETCH_TRANSACTIONS","FETCHING_TRANSACTIONS","FETCH_MEME","fetchAccounts","dispatch","a","type","payload","get","res","accounts_aux","data","owesTo","forEach","row","rootacc","find","rootaccount","targetaccount","ammount","account","filetredOwesTo","filter","toString","push","_","mapValues","keyBy","alert","CustomInput","fieldName","custom","isError","TextField","TransactionDescription","TransactionCost","InputProps","endAdornment","InputAdornment","position","values","sx","width","padding","FormLabel","component","FormGroup","display","flexDirection","gap","FormControlLabel","control","Checkbox","color","checked","includes","undefined","formValues","selectedAccounts","useMemo","targetAccounts","join","senderAccount","className","cost","description","SuccessAlert","handleNextTransaction","success","Box","justifyContent","alignItems","Alert","severity","Button","onClick","CustomLoading","CircularProgress","fetchingAccounts","useState","isSubmitting","setIsSubmitting","submittedSuccessfully","setSubmittedSuccesfully","submittedWithError","setSubmittedwithError","formVals","setFormVals","useEffect","handleFormSubmit","vals","getNewAccounts","targetAcc","created","itemCost","Math","floor","filtered","result","acc","recipient","submitFormValues","parseInt","desc","date","Date","post","status","transactionId","t","transactionid","accountid","newAccounts","res_","owesToArr","val","key","_id","put","isFilled","Object","keys","initialValues","maxWidth","margin","enableReinitialize","onSubmit","validate","errors","trim","test","transactions","fetchingTransactions","accountNames","fetchTransactions","orderBy","offset","setOffset","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","slice","item","format","locale","cs","marginBlock","max","disabled","min","open","acc1Name","acc1Id","acc2Name","acc2Id","handleClose","evenAccounts","ids","aux","Dialog","DialogContent","DialogActions","accountId","visibleDialog","setVisibleDialog","getAccountName","accId","Typography","textAlign","variant","owes","countOwes","selectedAcccount","setSelectedAccount","onChange","e","target","createBrowserHistory","Header","to","fontSize","fontWeight","marginBottom","marginTop","url","meme","title","postLink","fetchMeme","style","Link","href","rel","src","alt","HlacikJeRetard","App","prefersDarkMode","useMediaQuery","history","theme","createTheme","palette","mode","ThemeProvider","path","exact","Home","AddTransaction","TransactionsList","AccountDetail","INITIAL_STATE","dbReducer","action","memeReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.310ad65a.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { AccountsType } from '../../types'\nimport { Select, MenuItem, InputLabel, FormControl, FormHelperText } from '@mui/material'\nimport { Field } from 'formik'\n\ntype Props = {\n    accounts: AccountsType\n}\n\nconst AccountsSelect: React.FC<Props> = ({ accounts }) => {\n    const renderAccounts = () => {\n        return (\n            <Field name=\"account\">\n                {({ field, meta }: any) => (\n                    <FormControl error={meta.touched && meta.error?.length > 0} fullWidth>\n                        <InputLabel id=\"account\">Účet</InputLabel>\n                        <Select\n                            {...field}\n                            label=\"account\"\n                            labelId=\"account\"\n                            value={field.value}\n                        >\n                            {accounts.map(({ name, id }) => (\n                                <MenuItem\n                                    key={id}\n                                    value={id}\n                                >{name}</MenuItem>\n                            ))}\n                        </Select>\n                        {meta.error && meta.touched && <FormHelperText>{meta.error}</FormHelperText>}\n                    </FormControl>\n                )}\n\n            </Field>\n        )\n    }\n\n    return (\n        renderAccounts()\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps)(AccountsSelect)\n","import axios from 'axios'\nexport const API_KEY = '6179190f8597142da1745b0f'\nexport default axios.create({\n    baseURL: 'https://mancavecashflow-93a1.restdb.io/rest/',\n    headers: {\n        'cache-control': 'no-cache',\n        'x-apikey': API_KEY\n    }\n})\n\nexport const memeapi = axios.create({\n    baseURL: 'https://meme-api.herokuapp.com/'\n})","export const FETCH_ACCOUNTS = 'fetchAccounts'\nexport const FETCHING_ACCOUNTS = 'fetchingAccounts'\nexport const FETCH_TRANSACTIONS = 'fetchTransactions'\nexport const FETCHING_TRANSACTIONS = 'fetchingTransactions'\nexport const FETCH_MEME = 'fetchMeme'","import { Dispatch } from 'react';\nimport db, { memeapi } from '../api'\nimport { AccountsType } from '../types';\nimport {\n    FETCH_ACCOUNTS,\n    FETCHING_ACCOUNTS,\n    FETCH_TRANSACTIONS,\n    FETCHING_TRANSACTIONS,\n    FETCH_MEME\n} from \"./types\"\nimport _ from 'lodash'\n\nexport const fetchAccounts = () => async (dispatch: Dispatch<any>) => {\n    dispatch({\n        type: FETCHING_ACCOUNTS,\n        payload: true\n    })\n\n    try {\n        const res = await db.get('/accounts')\n        const accounts_aux = res.data as [{ id: string, _id: string, name: string, owesTo: { [key: string]: number } }]\n\n        const owesTo = await db.get('/owesto') as { data: [{ rootaccount: string, targetaccount: string, ammount: number }] }\n\n\n        owesTo.data.forEach(row => {\n            const rootacc = accounts_aux.find(({ id }) => id === row.rootaccount)\n            if (rootacc) {\n                rootacc.owesTo[row.targetaccount] = row.ammount\n            }\n        })\n\n        let accounts: AccountsType = []\n        accounts_aux.forEach(account => {\n            const filetredOwesTo = owesTo.data.filter(({ rootaccount }) => rootaccount === account.id.toString())\n            accounts.push({\n                id: account.id,\n                name: account.name,\n                owesTo: _.mapValues(_.keyBy(filetredOwesTo, 'targetaccount'), 'ammount')\n            })\n        })\n\n        dispatch({\n            type: FETCH_ACCOUNTS,\n            payload: accounts\n        })\n\n        dispatch({\n            type: FETCHING_ACCOUNTS,\n            payload: false\n        })\n    } catch (e) {\n        alert('Vyskytla se chyba :(')\n    }\n}\n\nexport const fetchTransactions = () => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch({\n            type: FETCHING_TRANSACTIONS,\n            payload: true\n        })\n        const res = await db.get('/transactionhistory')\n        dispatch({\n            type: FETCH_TRANSACTIONS,\n            payload: _.orderBy(res.data as [{}], ['id'], ['desc'])\n        })\n        dispatch({\n            type: FETCHING_TRANSACTIONS,\n            payload: false\n        })\n    } catch (e) {\n        alert('Vyskytla se chyba :(')\n    }\n}\n\nexport const fetchMeme = () => async (dispatch: Dispatch<any>) => {\n    const res = await memeapi.get('/gimme') as {\n        data: {\n            url: string, title: string, postLink: string\n        }\n    }\n\n    dispatch({\n        type: FETCH_MEME,\n        payload: {\n            url: res.data.url,\n            title: res.data.title,\n            postLink: res.data.postLink\n        }\n    })\n}","import React from 'react'\nimport { Field } from 'formik'\nimport { FormControl, FormHelperText, TextField } from '@mui/material'\n\ntype Props = {\n    fieldName: string,\n    label: string,\n    custom?: any\n}\n\nconst CustomInput: React.FC<Props> = ({ fieldName, label, custom }: Props) => {\n    return (\n        <Field name={fieldName}>\n            {({ field, meta }: any) => {\n                const isError = meta.touched && meta.error?.length > 0\n                return (\n                    <FormControl error={isError} fullWidth>\n                        <TextField\n                            {...field}\n                            {...custom}\n                            label={label}\n                            id={fieldName}\n                            error={isError}\n                        />\n                        {isError && <FormHelperText>{meta.error}</FormHelperText>}\n                    </FormControl>\n                )\n            }}\n        </Field>\n    )\n}\n\nexport default CustomInput\n","import React from 'react'\nimport CustomInput from '../customInput/CustomInput'\n\nconst TransactionDescription = () => {\n    return (\n        <CustomInput fieldName=\"description\" label=\"Popis\" />\n    )\n}\n\nexport default TransactionDescription\n","import React from 'react'\nimport CustomInput from '../customInput/CustomInput'\nimport { InputAdornment } from '@mui/material'\n\nconst TransactionCost = () => {\n    return (\n        <CustomInput fieldName=\"cost\" label=\"Cena položky\" custom={{\n            InputProps: { endAdornment: <InputAdornment position=\"end\">Kč</InputAdornment> }\n        }} />\n    )\n}\n\nexport default TransactionCost\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { fetchAccounts } from '../../actions'\nimport { Field } from 'formik'\nimport { AccountsType } from '../../types'\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, FormLabel } from '@mui/material'\nimport { Box } from '@mui/system'\n\ntype Props = {\n    values: any,\n    error: string\n    fetchAccounts: any,\n    accounts: AccountsType\n}\n\nconst TargetAccounts: React.FC<Props> = ({ values, error, accounts }: Props) => {\n    return (\n        <Box sx={{ width: '100%', padding: '0 1rem' }}>\n            <FormControl error={error ? true : false}>\n                <FormLabel component=\"legend\">Rozdělit mezi účty:</FormLabel>\n                <FormGroup sx={{ display: 'flex', flexDirection: 'row', gap: '3rem' }}>\n                    {accounts.map(({ name, id }) => (\n                        <Field\n                            key={id}\n                            name='targetAccounts'\n                            value={id}\n                            type=\"checkbox\"\n                            component={({ field }: any) => {\n                                return (\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox {...field} color='primary' checked={values.includes(id.toString())} />\n                                        }\n                                        label={name}\n                                    />\n                                )\n                            }}\n                        />\n                    ))}\n                </FormGroup>\n                {error !== undefined && <FormHelperText>{error}</FormHelperText>}\n            </FormControl>\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps, { fetchAccounts })(TargetAccounts)\n","import React, { useMemo } from 'react'\nimport { connect } from 'react-redux'\nimport { AccountsType, FormikVals } from '../../types'\nimport './sumTransaction.scss'\n\ntype Props = {\n    accounts: AccountsType,\n    formValues: FormikVals\n}\n\nconst SumTransaction: React.FC<Props> = ({ accounts, formValues }: Props) => {\n    const selectedAccounts = useMemo((): string => {\n        return (\n            formValues.targetAccounts.length === accounts.length\n                ? \"všechny účty\"\n                : `účty ${accounts.filter(({ id }) => formValues.targetAccounts.includes(id.toString())).map(({ name }) => name).join(', ')}`\n        )\n    }, [accounts, formValues.targetAccounts])\n\n    const senderAccount = useMemo((): string => {\n        if (accounts === undefined) {\n            return ''\n        }\n        return accounts.filter(({ id }) => formValues.account.toString() === id.toString())[0].name\n    }, [accounts, formValues.account])\n\n    return (\n        <div className=\"sumRoot\">\n            Částka <span className=\"highlight\">{formValues.cost} Kč</span>&nbsp;za položku <span className=\"highlight\">{formValues.description}</span>&nbsp;bude z účtu <span className=\"highlight\">{senderAccount}</span>&nbsp;rozdělena mezi <span className=\"highlight\">{selectedAccounts}</span>.\n        </div>\n    )\n}\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps)(SumTransaction)\n","import React from 'react'\nimport { Alert, Box, Button } from '@mui/material'\n\ntype Props = {\n    handleNextTransaction: () => void,\n    success?: boolean\n}\n\nconst SuccessAlert: React.FC<Props> = ({ handleNextTransaction, success }: Props) => {\n    return (\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: '.5rem', justifyContent: 'center', alignItems: 'center' }}>\n            {success\n                ? <Alert severity=\"success\" >Přidání proběhlo úspěšně!</Alert>\n                : <Alert severity=\"error\">Něco se pokazilo, zkus to prosím znovu</Alert>}\n            <Button onClick={handleNextTransaction}>Další transakce</Button>\n        </Box>\n    )\n}\n\nexport default SuccessAlert","import React from 'react'\nimport { Box, CircularProgress } from '@mui/material'\n\nconst CustomLoading = () => {\n    return (\n        <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            <CircularProgress />\n        </Box>\n    )\n}\n\nexport default CustomLoading\n","import React, { useEffect, useMemo, useState } from 'react'\nimport AccountsSelect from '../accountsSelect/AccountsSelect'\nimport { Formik, Form } from 'formik'\nimport { Button, Box } from '@mui/material'\nimport { AccountsType, FormikVals, ItemType } from '../../types'\nimport { fetchAccounts } from '../../actions'\nimport { connect } from 'react-redux'\nimport './AddTransaction.scss'\nimport TransactionDescription from '../transactionDescription/TransactionDescription'\nimport TransactionCost from '../transactionCost/TransactionCost'\nimport TargetAccounts from '../targetAccounts/TargetAccounts'\nimport SumTransaction from '../sumTransaction/SumTransaction'\nimport db from '../../api'\nimport _ from 'lodash'\nimport SuccessAlert from '../successAlert/SuccessAlert'\nimport { AxiosResponse } from 'axios'\nimport CustomLoading from '../CustomLoading'\n\ntype Props = {\n    fetchAccounts: () => any,\n    accounts: AccountsType,\n    fetchingAccounts: boolean\n}\n\nconst AddTransaction: React.FC<Props> = ({ fetchAccounts, accounts, fetchingAccounts }: Props) => {\n    const [isSubmitting, setIsSubmitting] = useState(false)\n    const [submittedSuccessfully,\n        setSubmittedSuccesfully] = useState(false)\n    const [submittedWithError, setSubmittedwithError] = useState(false)\n    const [formVals, setFormVals] = useState<FormikVals>({})\n\n    useEffect(() => {\n        fetchAccounts()\n    }, [fetchAccounts])\n\n    const handleNextTransaction = () => {\n        setIsSubmitting(false)\n        setSubmittedSuccesfully(false)\n        setSubmittedwithError(false)\n    }\n\n    const handleFormSubmit = async (vals: FormikVals) => {\n        setFormVals(vals)\n        setIsSubmitting(true)\n        fetchAccounts()\n    }\n\n    useEffect(() => {\n        const getNewAccounts = ({ targetAcc, cost, created }: ItemType): AccountsType => {\n            const itemCost = Math.floor(cost / targetAcc.length)\n            const filtered = accounts.filter(({ id }) => {\n                return id.toString() !== created.toString()\n            })\n            let result: AccountsType = []\n            targetAcc.forEach(acc => {\n                const recipient = filtered.find(({ id }) => {\n                    return id.toString() === acc.toString()\n                })\n                if (recipient) {\n                    recipient.owesTo[created] = (recipient.owesTo[created] ?? 0) + itemCost\n                    result = [...result, recipient]\n                }\n            })\n            return result\n        }\n\n        const submitFormValues = async () => {\n            const data: ItemType = {\n                created: (formVals.account as string),\n                cost: parseInt(formVals.cost as string),\n                targetAcc: (formVals.targetAccounts as string[]),\n                desc: formVals.description as string,\n                date: new Date().toString()\n            }\n\n            const res: AxiosResponse<ItemType> = await db.post('/transactionhistory', data)\n            if (res.status !== 201) {\n                return\n            }\n            const transactionId = res.data.id\n            for (let t of data.targetAcc) {\n                db.post('/itemaccounts', {\n                    transactionid: transactionId,\n                    accountid: t\n                })\n            }\n\n            const newAccounts = getNewAccounts(data)\n\n            const res_ = await db.get('/owesto')\n            const owesToArr = res_.data as [{\n                _id: string,\n                rootaccount: string,\n                targetaccount: string,\n                ammount: number\n            }]\n\n            for (let acc of newAccounts) {\n                _.map(acc.owesTo, (val, key) => {\n                    const id = owesToArr.find(({ rootaccount, targetaccount }) => {\n                        return rootaccount === acc.id.toString() && targetaccount === key\n                    })?._id\n\n                    if (id) {\n                        db.put(`/owesto/${id}`, { ammount: val })\n                    }\n                })\n            }\n\n            setIsSubmitting(false)\n            setSubmittedSuccesfully(true)\n        }\n\n        if (!fetchingAccounts && isSubmitting) {\n            submitFormValues()\n        }\n        // eslint-disable-next-line\n    }, [fetchingAccounts])\n\n    const isFilled = (values: FormikVals) => {\n        for (let key of Object.keys(values)) {\n            if (values[key].length === 0) {\n                return false\n            }\n        }\n        return true\n    }\n\n    const initialValues = useMemo(() => {\n        return {\n            account: '',\n            description: '',\n            cost: '',\n            targetAccounts: accounts.map(({ id }) => id.toString())\n        }\n    }, [accounts])\n\n    const validate = (vals: any) => {\n        let errors = {}\n\n        if (!vals.account) {\n            errors = { ...errors, account: \"Vyber účet\" }\n        }\n\n        if (!vals.description) {\n            errors = { ...errors, description: \"Popis je nutný\" }\n        }\n\n        if (vals.description?.trim().length < 2 || vals.description?.trim().length > 100) {\n            errors = { ...errors, description: \"Chybná délka popisu\" }\n        }\n\n        if (!(/^-?\\d+$/.test(vals.cost))) {\n            errors = { ...errors, cost: \"Cena musí být číslo\" }\n        }\n\n        if (!vals.targetAccounts.length) {\n            errors = { ...errors, targetAccounts: \"Je potřeba zvolit alespoň jeden účet.\" }\n        }\n        return errors\n    }\n\n    return (\n        <Box sx={{ maxWidth: 400, margin: 'auto' }}>\n            {submittedSuccessfully && <SuccessAlert\n                success\n                handleNextTransaction={handleNextTransaction}\n            />}\n\n            {submittedWithError && <SuccessAlert\n                handleNextTransaction={handleNextTransaction}\n            />}\n\n            {!submittedSuccessfully && !submittedWithError && (\n                <Formik enableReinitialize initialValues={initialValues} onSubmit={handleFormSubmit} validate={validate}>\n                    {({ values, errors }: any) => {\n                        return (\n                            <Form>\n                                <Box className=\"root\" sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem' }}>\n                                    <AccountsSelect />\n                                    <TransactionDescription />\n                                    <TransactionCost />\n                                    <TargetAccounts values={values.targetAccounts} error={errors.targetAccounts} />\n                                    {isFilled(values) && !Object.keys(errors).length && <SumTransaction formValues={values} />}\n                                    {isSubmitting\n                                        ? <CustomLoading />\n                                        : <Button type=\"submit\">\n                                            Potvrdit\n                                        </Button>}\n                                </Box>\n                            </Form>\n                        )\n                    }}\n                </Formik>\n            )}\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts, fetchingAccounts: state.db.fetchingAccounts }\n}\n\nexport default connect(mapStateToProps, { fetchAccounts })(AddTransaction)\n","import {\n    Box,\n    Button,\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableBody,\n    TableCell\n} from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchTransactions, fetchAccounts } from '../../actions'\nimport { TransactionHistory } from '../../types'\nimport _ from 'lodash'\nimport { format } from 'date-fns'\nimport { cs } from 'date-fns/locale'\nimport CustomLoading from '../CustomLoading'\n\ntype Props = {\n    fetchTransactions: () => any,\n    fetchAccounts: () => any,\n    transactions: TransactionHistory,\n    accountNames: { [key: string]: string },\n    fetchingTransactions: boolean,\n    fetchingAccounts: boolean\n}\n\nconst TransactionsList: React.FC<Props> = ({\n    fetchTransactions,\n    fetchAccounts,\n    transactions,\n    accountNames,\n    fetchingTransactions,\n    fetchingAccounts\n}: Props) => {\n    const [offset, setOffset] = useState<number>(0)\n    const limit = 10\n\n    useEffect(() => {\n        fetchTransactions()\n    }, [fetchTransactions])\n\n    useEffect(() => {\n        fetchAccounts()\n    }, [fetchAccounts])\n\n    return (\n        transactions && !fetchingAccounts && !fetchingTransactions\n            ? (<Box sx={{ maxWidth: 700, margin: 'auto' }}>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Z účtu</TableCell>\n                                <TableCell>Na účty</TableCell>\n                                <TableCell>Částka</TableCell>\n                                <TableCell>Popis</TableCell>\n                                <TableCell>Datum</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {transactions.slice(offset, limit + offset).map(item => (\n                                <TableRow key={item.id}>\n                                    <TableCell>{accountNames[item.created]}</TableCell>\n                                    <TableCell>{item.targetAcc.map(id => accountNames[id]).join(', ')}</TableCell>\n                                    <TableCell>{item.cost} Kč</TableCell>\n                                    <TableCell>{item.desc}</TableCell>\n                                    <TableCell>{format(new Date(item.date), 'do LLLL yyyy', { locale: cs })}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    marginBlock: '1rem'\n                }}>\n                    <Button\n                        onClick={() => setOffset(Math.max(0, offset - limit))}\n                        disabled={offset === 0}\n                    >Předchozí</Button>\n                    <Button\n                        disabled={offset + limit > transactions.length - 1}\n                        onClick={() => setOffset(Math.min(transactions.length - 1, offset + limit))}\n                    >Další</Button>\n                </Box>\n            </Box>)\n            : <CustomLoading />\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        transactions: state.db.transactions,\n        fetchingTransactions: state.db.fetchingTransactions,\n        fetchingAccounts: state.db.fetchingAccounts,\n        accountNames: _.mapValues(_.keyBy(state.db.accounts, 'id'), 'name')\n    }\n}\nexport default connect(mapStateToProps, { fetchTransactions, fetchAccounts })(TransactionsList)\n","import React from 'react'\nimport { Button, Dialog, DialogActions, DialogContent } from '@mui/material'\nimport db from '../api'\nimport { connect } from 'react-redux'\nimport { fetchAccounts } from '../actions'\n\ntype Props = {\n    open: boolean,\n    acc1Name: string,\n    acc1Id: string,\n    acc2Name: string,\n    acc2Id: string,\n    handleClose: () => any,\n    fetchAccounts: () => any\n}\n\nconst ConfirmEvenAccounts: React.FC<Props> = ({\n    open,\n    acc1Name,\n    acc1Id,\n    acc2Name,\n    acc2Id,\n    handleClose,\n    fetchAccounts\n}: Props) => {\n    const evenAccounts = async () => {\n        handleClose()\n        const res_ = await db.get('/owesto')\n        const owesToArr = res_.data as [{\n            _id: string,\n            rootaccount: string,\n            targetaccount: string,\n            ammount: number\n        }]\n\n        const ids = owesToArr.filter(({ rootaccount, targetaccount }) => {\n            return (\n                rootaccount === acc1Id.toString() && targetaccount === acc2Id.toString()\n            ) || (rootaccount === acc2Id.toString() && targetaccount === acc1Id.toString())\n        })\n\n        for (let aux of ids) {\n            await db.put(`/owesto/${aux._id}`, { ammount: 0 })\n        }\n\n        fetchAccounts()\n    }\n\n\n    return (\n        <Dialog\n            open={open}\n        >\n            <DialogContent>\n                Tímto se vyrovná rozdíl mezi účty {acc1Name} a {acc2Name}. Pokračovat?\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>NE</Button>\n                <Button onClick={evenAccounts}>ANO</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default connect(null, { fetchAccounts })(ConfirmEvenAccounts)","import React, { useMemo, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Box, Button, Typography } from '@mui/material'\nimport { AccountsType } from '../../types'\nimport ConfirmEvenAccounts from '../ConfirmEvenAccounts'\nimport CustomLoading from '../CustomLoading'\nimport _ from 'lodash'\nimport './accountInfo.scss'\n\n\ntype Props = {\n    accountId: string,\n    accounts: AccountsType,\n    fetchingAccounts: boolean\n}\n\nconst AccountInfo: React.FC<Props> = ({\n    accountId, accounts, fetchingAccounts\n}: Props) => {\n    const [visibleDialog, setVisibleDialog] = useState('')\n\n    const account = useMemo(() => {\n        return accounts.find(({ id }) => accountId.toString() === id.toString())\n    }, [accounts, accountId])\n\n    const countOwes = (accId: string, val: number) => {\n        if (!account) return\n\n        const res = accounts.find(({ id }) => accId.toString() === id.toString())?.owesTo[account.id]\n        if (res === undefined) return\n        return val - res\n    }\n\n    const getAccountName = (accId: string) => {\n        return accounts.find(({ id }) => accId.toString() === id.toString())?.name\n    }\n\n    return (\n        account !== undefined && !fetchingAccounts\n            ? <Box>\n                <Typography\n                    sx={{ textAlign: 'center' }}\n                    component='h3'\n                    variant='h4'\n                    className=\"account-title\"\n                >{account.name}</Typography>\n                <Box className=\"accounts-box\">\n                    {_.map(account.owesTo, (val, key) => {\n                        const owes = countOwes(key, val)\n                        return (\n                            <Box key={key} className=\"account-row\">\n                                <Box>Účtu <span className=\"highlight\">{getAccountName(key)}</span> dluží <span className={'highlight ' + (owes && owes > 0 ? 'owes-more' : 'owes-less')}>{owes} Kč</span>.</Box>\n                                <Button onClick={() => setVisibleDialog(key)}>Vyrovnat účty</Button>\n                                <ConfirmEvenAccounts\n                                    open={visibleDialog === key}\n                                    acc1Id={account.id}\n                                    acc1Name={account.name}\n                                    acc2Id={key}\n                                    acc2Name={getAccountName(key) || ''}\n                                    handleClose={() => setVisibleDialog('')}\n                                />\n                            </Box>\n                        )\n                    })}\n                </Box>\n            </Box>\n            : <CustomLoading />\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts, fetchingAccounts: state.db.fetchingAccounts }\n}\n\nexport default connect(mapStateToProps)(AccountInfo)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchAccounts } from '../../actions'\nimport { AccountsType } from '../../types'\nimport AccountInfo from '../accountInfo/AccountInfo'\nimport {\n    Box,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    FormHelperText\n} from '@mui/material'\n\ntype Props = {\n    fetchAccounts: () => any,\n    accounts: AccountsType\n}\n\nconst AccountDetail: React.FC<Props> = ({ fetchAccounts, accounts }: Props) => {\n    const [selectedAcccount, setSelectedAccount] = useState<string>('69')\n\n    useEffect(() => {\n        fetchAccounts()\n    }, [fetchAccounts])\n\n    return (\n        <Box sx={{ maxWidth: 400, margin: 'auto' }}>\n            <FormControl fullWidth>\n                <InputLabel id=\"account\">Účet</InputLabel>\n                <Select\n                    label=\"account\"\n                    labelId=\"account\"\n                    value={selectedAcccount}\n                    onChange={e => setSelectedAccount(e.target.value)}\n                >\n                    {accounts.map(({ name, id }) => (\n                        <MenuItem\n                            key={id}\n                            value={id}\n                        >{name}</MenuItem>\n                    ))}\n                </Select>\n                <FormHelperText>Zvolte účet, jehož detail chcete zobrazit.</FormHelperText>\n                {selectedAcccount !== undefined && <AccountInfo accountId={selectedAcccount} />}\n            </FormControl>\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return { accounts: state.db.accounts }\n}\n\nexport default connect(mapStateToProps, { fetchAccounts })(AccountDetail)","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();","import React from 'react'\nimport { Box } from '@mui/system'\nimport { Typography } from '@mui/material'\nimport { Link } from 'react-router-dom'\nimport './header.scss'\n\nconst Header = () => {\n    return (\n        <Box>\n            <Box className=\"navbar\">\n                <Link to='/brno-byt-cash/'>Domů</Link>\n                <Link to='/brno-byt-cash/add'>Přidat položku</Link>\n                <Link to='/brno-byt-cash/list'>Historie transakcí</Link>\n                <Link to='/brno-byt-cash/account'>Výpis účtu</Link>\n            </Box>\n            <Typography component='h1' sx={{ textAlign: 'center', fontSize: '2.5rem', fontWeight: 'bold', marginBottom: '2rem', marginTop: '5rem' }}>Where's my money?</Typography>\n        </Box>\n    )\n}\n\nexport default Header\n","import React, { useEffect } from 'react'\nimport { Box, Link, Button } from '@mui/material'\nimport { fetchMeme } from '../actions'\nimport { connect } from 'react-redux'\n\ntype Props = {\n    fetchMeme: () => any,\n    url: string,\n    title: string,\n    postLink: string,\n}\n\nconst Home: React.FC<Props> = ({ fetchMeme, url, title, postLink }: Props) => {\n    useEffect(() => {\n        fetchMeme()\n    }, [fetchMeme])\n\n    return (\n        <Box sx={{\n            width: 'min(90vw, 400px)',\n            display: 'flex',\n            flexDirection: 'column',\n            margin: 'auto',\n            alignItems: 'center',\n\n        }}>\n            <p style={{ margin: 0, padding: 0, textAlign: 'center' }}>Náhodný meme zde:</p>\n            <Link\n                sx={{ fontSize: '1.5rem' }}\n                href={postLink}\n                target=\"_blank\"\n                rel=\"noreferrer\">{title}</Link>\n            <img src={url} alt={title} style={{ maxWidth: '100%' }} title={title} />\n            <Button\n                sx={{ marginTop: '1rem' }}\n                onClick={() => fetchMeme()}>\n                Další prosím\n            </Button>\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        url: state.meme.url,\n        title: state.meme.title,\n        postLink: state.meme.postLink\n    }\n}\nexport default connect(mapStateToProps, { fetchMeme })(Home)\n","import React from 'react'\n\nconst HlacikJeRetard = () => {\n    return (\n        <>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n            <h1 style={{ textAlign: 'center' }}>JE TO TAK</h1>\n        </>\n    )\n}\n\nexport default HlacikJeRetard\n","import React, { useMemo, useEffect } from 'react';\nimport { Paper, Box, useMediaQuery, createTheme } from '@mui/material'\nimport AddTransaction from '../addTransaction/AddTransaction';\nimport TransactionsList from '../transactionsList/TransactionsList';\nimport AccountDetail from '../accountDetail/AccountDetail';\nimport { Route, Router } from 'react-router'\nimport history from '../../history'\nimport './App.scss'\nimport Header from '../header/Header';\nimport { ThemeProvider } from '@mui/system';\nimport Home from '../Home';\nimport HlacikJeRetard from '../HlacikJeRetard';\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  useEffect(() => {\n    history.push('/brno-byt-cash')\n  })\n\n  const theme = useMemo(\n    () => createTheme({\n      palette: {\n        mode: prefersDarkMode ? 'dark' : 'light',\n      },\n    }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Router history={history}>\n        <Paper className=\"paper\">\n          <Box className=\"root\">\n            <Header />\n            <Route path=\"/brno-byt-cash/\" exact component={Home} />\n            <Route path=\"/brno-byt-cash/add\" exact component={AddTransaction} />\n            <Route path=\"/brno-byt-cash/list\" exact component={TransactionsList} />\n            <Route path=\"/brno-byt-cash/account\" exact component={AccountDetail} />\n            <Route path=\"/brno-byt-cash/hlacikjeretard\" exact component={HlacikJeRetard} />\n          </Box>\n        </Paper>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","import { ActionType } from \"../types\"\nimport { FETCHING_ACCOUNTS, FETCHING_TRANSACTIONS, FETCH_ACCOUNTS, FETCH_TRANSACTIONS } from \"../actions/types\"\n\nconst INITIAL_STATE = {\n    accounts: []\n}\n\nconst dbReducer = (state = INITIAL_STATE, action: ActionType) => {\n    switch (action.type) {\n        case FETCH_ACCOUNTS:\n            return { ...state, accounts: action.payload }\n        case FETCHING_ACCOUNTS:\n            return { ...state, fetchingAccounts: action.payload }\n        case FETCH_TRANSACTIONS:\n            return { ...state, transactions: action.payload }\n        case FETCHING_TRANSACTIONS:\n            return { ...state, fetchingTransactions: action.payload }\n        default:\n            return state\n    }\n}\n\nexport default dbReducer","import { ActionType } from \"../types\"\nimport { FETCH_MEME } from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    url: '',\n    title: '',\n    postLink: '',\n}\n\nconst memeReducer = (state = INITIAL_STATE, action: ActionType) => {\n    switch (action.type) {\n        case FETCH_MEME:\n            return {\n                ...state,\n                url: action.payload.url, title: action.payload.title, postLink: action.payload.postLink\n            }\n\n        default:\n            return state\n    }\n}\nexport default memeReducer","import { combineReducers } from 'redux'\nimport dbReducer from './dbReducer'\nimport memeReducer from './memeReducer'\n\nexport default combineReducers({\n    db: dbReducer,\n    meme: memeReducer,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk'\nimport { CssBaseline } from '@mui/material'\n\nimport reducers from './reducers'\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}